---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: echo
spec:
  description: This task will echo the message.
  params:
    - name: message
      description: The message to echo
      type: string
  steps:
    - name: echo-message
      image: alpine:3
      command: [/bin/echo]
      args: ["$(params.message)"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all of the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_SOURCE_PATH}" because ${WORKSPACE_SOURCE_PATH} might be "/"
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: lint-task
spec:
  workspaces:
    - name: source
  steps:
    - name: flake8
      image: python:3.9-slim
      workingDir: /workspace/source
      script: |
        echo "Calling Flake8 linter"
        pip install flake8
        flake8 service tests
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tests-task
spec:
  workspaces:
    - name: source
  steps:
    - name: pytest
      image: python:3.9-slim
      workingDir: /workspace/source
      script: |
        echo "Running unit tests with PyUnit"
        pip install nose coverage
        nosetests -vv --with-spec --spec-color --with-coverage --cover-package=service
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: image
      type: string
  workspaces:
    - name: source
  steps:
    - name: build
      image: docker:20.10.7
      script: |
        echo "Building image for $(params.image)"
        docker build -t $(params.image) /workspace/source
        docker push $(params.image)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: branch
      type: string
    - name: url
      type: string
  workspaces:
    - name: source
  steps:
    - name: deploy
      image: bitnami/oc:4.7
      script: |
        echo "Deploying $(params.branch) branch of $(params.url)"
        oc apply -f /workspace/source/k8s/deployment.yaml
        oc apply -f /workspace/source/k8s/service.yaml
---

